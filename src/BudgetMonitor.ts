import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

export default class BudgetMonitor {
  private doc: GoogleSpreadsheet;

  constructor(sheetId: string) {
    const email = process.env.GOOGLE_CLIENT_EMAIL;
    const key = process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n');
    if (!email || !key) {
      throw new Error('Google Sheets API credentials are not set in environment variables');
    }
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email,
      key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    this.doc = new GoogleSpreadsheet(sheetId, serviceAccountAuth);
  }

  async loadSheet() {
    await this.doc.loadInfo();
    const sheet = this.doc.sheetsByIndex[0]; // Assume the first sheet has transactions
    return sheet;
  }

  async getTransactions(): Promise<Array<{ date: string; description: string; amount: number; category: string | null }>> {
    const sheet = await this.loadSheet();
    const rows = await sheet.getRows();

    // Map over rows using row.get() for each property
    return rows.map(row => {
      return {
        date: row.get('Date') || '',  // Default to an empty string if Date is missing
        description: row.get('Description') || '',
        amount: row.get('Amount') ? parseFloat(row.get('Amount') as string) : 0,  // Parse amount to a number
        category: row.get('Category') || null,
      };
    });
  }
}
